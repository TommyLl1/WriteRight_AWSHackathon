from typing import List, Annotated, Optional
from pydantic import BaseModel, Field
from models.helpers import ChineseChar
from enum import Enum


class LLMModels(str, Enum):
    """
    Enum for available models.
    """

    GPT_3_5_TURBO = "gpt-3.5-turbo-0125"
    GPT_4 = "gpt-4"
    GPT_4O_MINI = "gpt-4o-mini"
    DEEPSEEK_V3 = "deepseek-v3"


class CondensedMCQ(BaseModel):
    question: str
    choices: List[str]
    answer: str


class CondensedMCQList(BaseModel):
    """List of condensed multiple-choice questions generated by the AI."""

    questions: List[CondensedMCQ] = Field(
        description="A list of multiple-choice questions generated by the AI."
    )
    count: Optional[int]


# AIQuestionRequestList = Annotated[List[ChineseChar], Field(
#     description="A list of Chinese characters to generate questions from."
# )]


class AIQuestionType(Enum):
    PAIRING_CARDS = "pairing_cards"
    # MATCH_PIC = "match_pic"
    FILL_IN_SENTENCE = "fill_in_sentence"
    FILL_IN_VOCAB = "fill_in_vocab"


class FillInVocabFormat(BaseModel):
    given_char: ChineseChar
    vocabularies: List[str]
    similar_characters: List[str]


class FillInSentenceFormat(BaseModel):
    given_char: ChineseChar
    sentence: str
    similar_characters: List[str] = Field(
        description="List of similar characters to the given character."
    )



class PairingCardsFormat(BaseModel):
    n: int  # Desired word length (2 to 4)
    target_char: ChineseChar  # The character to be used in the word
    words: List[str]  # List of words containing the target character


class RadicalTypes(str, Enum):
    RIGHT_LEFT = "right-left"
    TOP_BOTTOM = "top-bottom"
    INSIDE_OUT = "inside-out"
    COMPLEX = "complex"
    DIFFICULT = "difficult"


class FillInRadicalFormat(BaseModel):
    target_char: ChineseChar
    radicals: List[str]
    type: RadicalTypes
    question: str
    choices: List[str]
    answer: str


MCQ_SYSTEM_PROMPT = """
Given a list of Chinese characters, generate "fill in the word" questions. Here are the steps:

1. Find a common word with the Chinese character.
2. Find 3 other characters that are similar to the selected character, and ensure all 4 characters (selected and 3 others) are distinct. They can be
  - Similar looking (have same or similar radicals, like 目 and 日)
  - Similar pronunciation in **Cantonese** (Jyutping), NOT Mandarin
  - Similar in meaning but does not make sense when combined as a word
3. Replace the character given in the word with a ？, and make sure none of the 3 other characters form sensible words when substituting for the ？
4. Create a CondensedMCQ Object, which looks like: `{"question": "？求", "choices": ["情", "清", "精", "請"],"answer": "請"}`
5. Repeat for all Chinese characters in the given list. Order of choices does not matter.

The return should be in minimized JSON format for easier extraction. Remove unnecessary whitespace, newlines, indents and/or codeblocks.
## Example Input:
['請', '蘋', '上']

## Example Output:
[{"question": "？求", "choices": ["情", "清", "精", "請"],"answer": "請"},
{"question": "？果", "choices": ["平", "蘋", "評", "拼"],"answer": "蘋"},
{"question": "樓？", "choices": ["尚", "卜", "上", "卡"],"answer": "上"}]

"""
