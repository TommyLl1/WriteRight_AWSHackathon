create table public.words (
  word_id bigint generated by default as identity not null,
  word text not null,
  description text null,
  image_url text null,
  pronunciation_url text null,
  strokes_url text null,
  constraint words_pkey primary key (word_id)
) TABLESPACE pg_default;

create table public.users (
  user_id uuid not null default gen_random_uuid (),
  created_at bigint not null,
  name text null,
  exp bigint null default '0'::bigint,
  level bigint null default '1'::bigint,
  email text null,
  constraint users_pkey primary key (user_id)
) TABLESPACE pg_default;

create table public.questions (
  answer_type text not null,
  question_type text not null,
  created_at bigint not null,
  given_material json[] null,
  target_word_id bigint null,
  prompt text null,
  mc_choices json[] null,
  mc_answers json[] null,
  pairs json[] null,
  use_count bigint null default '0'::bigint,
  correct_count bigint null default '0'::bigint,
  question_id uuid not null default gen_random_uuid (),
  constraint questions_pkey primary key (question_id)
) TABLESPACE pg_default;

create table public.past_wrong_words (
  item_id uuid not null default gen_random_uuid (),
  user_id uuid not null default gen_random_uuid (),
  word_id bigint null,
  wrong_count bigint null,
  wrong_image_url text null,
  last_wrong_at bigint null default (
    EXTRACT(epoch from now())
  )::bigint,
  created_at bigint null default (
    EXTRACT(epoch from now())
  )::bigint,
  constraint past_wrong_words_pkey primary key (item_id),
  constraint past_wrong_words_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE,
  constraint past_wrong_words_word_id_fkey foreign KEY (word_id) references words (word_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.game_sessions (
  game_id uuid not null default gen_random_uuid (),
  user_id uuid null default gen_random_uuid (),
  start_time bigint not null,
  question_ids uuid[] not null,
  status text null,
  constraint game_session_pkey primary key (game_id),
  constraint game_session_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.game_qa_history (
  game_id uuid not null default gen_random_uuid (),
  user_id uuid not null default gen_random_uuid (),
  question_id uuid not null default gen_random_uuid (),
  question_index integer not null,
  is_correct boolean not null,
  answer json null,
  constraint game_qa_history_pkey primary key (game_id, user_id, question_id),
  constraint game_qa_history_game_id_fkey foreign KEY (game_id) references game_data (game_id),
  constraint game_qa_history_question_id_fkey foreign KEY (question_id) references questions (question_id) on delete CASCADE,
  constraint game_qa_history_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.game_data (
  game_id uuid not null default gen_random_uuid (),
  user_id uuid not null default gen_random_uuid (),
  created_at bigint null default (
    EXTRACT(
      epoch
      from
        now()
    )
  )::bigint,
  earned_exp bigint null default '0'::bigint,
  time_spent bigint null default '0'::bigint,
  total_score integer null default 0,
  question_count integer null default 0,
  remaining_hearts integer null default 0,
  constraint game_data_pkey primary key (game_id),
  constraint game_data_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.tasks (
  task_id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  type text not null,
  created_at bigint null default (
    EXTRACT(
      epoch
      from
        now()
    )
  )::bigint,
  until bigint null,
  status text not null,
  title text not null,
  content json not null,
  priority integer null,
  completed_at bigint null,
  exp bigint not null default 0,
  target integer null,
  progress integer null,
  task_class text null,
  constraint tasks_pkey primary key (task_id),
  constraint tasks_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.user_settings (
  user_id uuid not null primary key references users (user_id) on delete cascade,
  updated_at bigint not null default (EXTRACT(epoch from now()))::bigint,
  language text not null default 'zh-hk',
  theme text null,
  settings jsonb null
) TABLESPACE pg_default;